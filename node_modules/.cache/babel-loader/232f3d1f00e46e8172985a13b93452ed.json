{"ast":null,"code":"var _jsxFileName = \"/Users/john/Documents/GitHub/color-generator/src/ColorGenerator.js\";\nimport React, { PureComponent } from 'react';\nimport './styles.css';\nimport { Color } from './components/Color';\nimport { disableBodyScroll } from 'body-scroll-lock';\nimport $ from 'jquery';\nimport { connect } from 'react-redux';\nimport { toggleColorType, toggleHistory } from './redux';\n\nclass ColorGenerator extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [],\n      generateGrayscale: false\n    };\n    this.anotherColor = this.anotherColor.bind(this);\n    this.colorRollback = this.colorRollback.bind(this);\n    this.generateColor = this.generateColor.bind(this);\n    this.toggleGrayscale = this.toggleGrayscale.bind(this);\n  }\n\n  anotherColor(clickedObject) {\n    if (clickedObject.target.id === \"color-generator\" || clickedObject.target.id === \"howto-text\") {\n      $(\"#howto-text\").remove();\n      $(\"#history-text\").remove();\n      var colorHex = this.generateColor();\n      this.setState({\n        colors: this.state.colors.concat({\n          hex: colorHex,\n          rgb: \"RGB Value\"\n        }) // end concat()\n\n      }); //end setState\n    } // end if\n\n  } // end anotherColor\n\n\n  generateColor() {\n    var generatedColor = \"\";\n\n    if (this.state.generateGrayscale) {\n      generatedColor = Math.floor(Math.random() * 16).toString(16).toUpperCase();\n      generatedColor = generatedColor + Math.floor(Math.random() * 16).toString(16).toUpperCase();\n      generatedColor = generatedColor.repeat(3);\n      return \"#\" + generatedColor;\n    } else {\n      generatedColor = Math.floor(Math.random() * 16777215).toString(16).toUpperCase();\n\n      while (generatedColor.length < 6) {\n        generatedColor = Math.floor(Math.random() * 16777215).toString(16).toUpperCase();\n      }\n      /* alert(this.hexToRgb(\"#\" + generatedColor).r + \"\\n\" +\n            this.hexToRgb(\"#\" + generatedColor).g + \"\\n\" +\n            this.hexToRgb(\"#\" + generatedColor).b); */\n\n\n      return \"#\" + generatedColor;\n    }\n  }\n  /* Tim Down: https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\n\n\n  hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  componentDidMount() {\n    disableBodyScroll(document.body);\n    /* Register the Space (32) key as a click */\n\n    $(window).keyup(function (event) {\n      if (event.keyCode === 32) {\n        $(\"#color-generator\").click();\n      } // end if\n\n    }); // end $(tabs).keyup\n  }\n\n  componentDidUpdate() {\n    var colorPanel = document.getElementById(\"color-list\");\n    colorPanel.scrollTo(0, colorPanel.scrollHeight);\n  }\n\n  colorRollback(clickedObject) {\n    var bgRollbackColor = $(clickedObject.target).css(\"backgroundColor\");\n    $('#color-generator').css(\"background-color\", bgRollbackColor);\n  }\n\n  toggleGrayscale() {\n    if (this.state.generateGrayscale) {\n      this.setState({\n        generateGrayscale: false\n      });\n      $('#grayscale').css(\"color\", \"#FFFFFF\");\n    } else {\n      this.setState({\n        generateGrayscale: true\n      });\n      $('#grayscale').css(\"color\", \"#000000\");\n    }\n  }\n\n  render(props) {\n    const {\n      toggleHistory,\n      toggleColorType,\n      colorType\n    } = this.props;\n\n    if (this.state.colors.length > 0) {\n      var bgColor = this.state.colors[this.state.colors.length - 1].hex;\n    }\n\n    const colorList = this.state.colors.map((color, index) => {\n      if (colorType == \"HEX\") {\n        /*#__PURE__*/\n        React.createElement(Color, {\n          key: index,\n          hex: color.hex,\n          function: this.colorRollback,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 5\n          }\n        });\n      } else if (colorType == \"RGB\") {\n        /*#__PURE__*/\n        React.createElement(Color, {\n          key: index,\n          hex: color.rgb,\n          function: this.colorRollback,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 5\n          }\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"color-generator\",\n      style: {\n        backgroundColor: bgColor\n      },\n      onClick: this.anotherColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"howto-text\",\n      onClick: this.anotherColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, \"Click, Tap, or Press \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 75\n      }\n    }, \"space\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"history-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"history-arrow\",\n      onClick: toggleHistory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, \"\\u2228\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"grayscale\",\n      onClick: this.toggleGrayscale,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, \"\\u2600\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"color-type\",\n      onClick: toggleColorType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, colorType)), \"  \", /*#__PURE__*/React.createElement(\"div\", {\n      id: \"color-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"history-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"Your color history will appear here.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \"Click on a color to return to it.\")), colorList), \" \"), \" \");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    colorType: state.colorType,\n    historyVisible: state.historyVisible\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleColorType: () => dispatch(toggleColorType()),\n    toggleHistory: () => dispatch(toggleHistory())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorGenerator);","map":{"version":3,"sources":["/Users/john/Documents/GitHub/color-generator/src/ColorGenerator.js"],"names":["React","PureComponent","Color","disableBodyScroll","$","connect","toggleColorType","toggleHistory","ColorGenerator","constructor","props","state","colors","generateGrayscale","anotherColor","bind","colorRollback","generateColor","toggleGrayscale","clickedObject","target","id","remove","colorHex","setState","concat","hex","rgb","generatedColor","Math","floor","random","toString","toUpperCase","repeat","length","hexToRgb","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","componentDidMount","document","body","window","keyup","event","keyCode","click","componentDidUpdate","colorPanel","getElementById","scrollTo","scrollHeight","bgRollbackColor","css","render","colorType","bgColor","colorList","map","color","index","backgroundColor","mapStateToProps","historyVisible","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,cAAP;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,SAA/C;;AAEA,MAAMC,cAAN,SAA6BP,aAA7B,CAA2C;AACzCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,iBAAiB,EAAE;AAFR,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDD,EAAAA,YAAY,CAACK,aAAD,EAAgB;AAC1B,QAAIA,aAAa,CAACC,MAAd,CAAqBC,EAArB,KAA4B,iBAA5B,IACDF,aAAa,CAACC,MAAd,CAAqBC,EAArB,KAA4B,YAD/B,EAC6C;AAC3CjB,MAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBkB,MAAjB;AACAlB,MAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBkB,MAAnB;AACA,UAAIC,QAAQ,GAAG,KAAKN,aAAL,EAAf;AACA,WAAKO,QAAL,CAAc;AACZZ,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAAX,CAAkBa,MAAlB,CACF;AACEC,UAAAA,GAAG,EAACH,QADN;AAEEI,UAAAA,GAAG,EAAE;AAFP,SADE,CADI,CAKH;;AALG,OAAd,EAJ2C,CAUjC;AACP,KAbqB,CAapB;;AACL,GA3BsC,CA2BrC;;;AAEFV,EAAAA,aAAa,GAAG;AACd,QAAIW,cAAc,GAAG,EAArB;;AACA,QAAI,KAAKjB,KAAL,CAAWE,iBAAf,EAAkC;AAChCe,MAAAA,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,EAA6BC,QAA7B,CAAsC,EAAtC,EAA0CC,WAA1C,EAAjB;AACAL,MAAAA,cAAc,GAAGA,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,EAA6BC,QAA7B,CAAsC,EAAtC,EAA0CC,WAA1C,EAAlC;AACAL,MAAAA,cAAc,GAAGA,cAAc,CAACM,MAAf,CAAsB,CAAtB,CAAjB;AACA,aAAO,MAAMN,cAAb;AACD,KALD,MAKO;AACPA,MAAAA,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,EAAgDC,WAAhD,EAAjB;;AACA,aAAOL,cAAc,CAACO,MAAf,GAAwB,CAA/B,EAAkC;AAChCP,QAAAA,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,EAAgDC,WAAhD,EAAjB;AACD;AACD;;;;;AAGA,aAAO,MAAML,cAAb;AACD;AACA;AAEL;;;AAEIQ,EAAAA,QAAQ,CAACV,GAAD,EAAM;AACd;AACA,QAAIW,cAAc,GAAG,kCAArB;AACAX,IAAAA,GAAG,GAAGA,GAAG,CAACY,OAAJ,CAAYD,cAAZ,EAA4B,UAASE,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACrD,aAAOF,CAAC,GAAGA,CAAJ,GAAQC,CAAR,GAAYA,CAAZ,GAAgBC,CAAhB,GAAoBA,CAA3B;AACD,KAFK,CAAN;AAIA,QAAIC,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDlB,GAAjD,CAAb;AACA,WAAOiB,MAAM,GAAG;AACdH,MAAAA,CAAC,EAAEK,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADG;AAEdF,MAAAA,CAAC,EAAEI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFG;AAGdD,MAAAA,CAAC,EAAEG,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAHG,KAAH,GAIT,IAJJ;AAKD;;AAEHG,EAAAA,iBAAiB,GAAG;AAClB3C,IAAAA,iBAAiB,CAAC4C,QAAQ,CAACC,IAAV,CAAjB;AACA;;AACI5C,IAAAA,CAAC,CAAC6C,MAAD,CAAD,CAAUC,KAAV,CAAgB,UAASC,KAAT,EAAgB;AAC5B,UAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACtBhD,QAAAA,CAAC,CAAC,kBAAD,CAAD,CAAsBiD,KAAtB;AACH,OAH2B,CAG1B;;AACL,KAJD,EAHc,CAOV;AACT;;AAECC,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAGR,QAAQ,CAACS,cAAT,CAAwB,YAAxB,CAAjB;AACAD,IAAAA,UAAU,CAACE,QAAX,CAAoB,CAApB,EAAsBF,UAAU,CAACG,YAAjC;AACD;;AAED1C,EAAAA,aAAa,CAACG,aAAD,EAAgB;AAC3B,QAAIwC,eAAe,GAAGvD,CAAC,CAACe,aAAa,CAACC,MAAf,CAAD,CAAwBwC,GAAxB,CAA4B,iBAA5B,CAAtB;AACAxD,IAAAA,CAAC,CAAC,kBAAD,CAAD,CAAsBwD,GAAtB,CAA0B,kBAA1B,EAA8CD,eAA9C;AACD;;AAEDzC,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAKP,KAAL,CAAWE,iBAAf,EAAkC;AAChC,WAAKW,QAAL,CAAc;AAAEX,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACAT,MAAAA,CAAC,CAAC,YAAD,CAAD,CAAgBwD,GAAhB,CAAoB,OAApB,EAA4B,SAA5B;AACD,KAHD,MAGO;AACL,WAAKpC,QAAL,CAAc;AAAEX,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACAT,MAAAA,CAAC,CAAC,YAAD,CAAD,CAAgBwD,GAAhB,CAAoB,OAApB,EAA4B,SAA5B;AACD;AACF;;AAEDC,EAAAA,MAAM,CAACnD,KAAD,EAAQ;AACZ,UAAM;AAAEH,MAAAA,aAAF;AAAiBD,MAAAA,eAAjB;AAAkCwD,MAAAA;AAAlC,QAAgD,KAAKpD,KAA3D;;AACA,QAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkBuB,MAAlB,GAA2B,CAA9B,EAAiC;AAC/B,UAAI4B,OAAO,GAAG,KAAKpD,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWC,MAAX,CAAkBuB,MAAlB,GAA2B,CAA7C,EAAgDT,GAA9D;AACH;;AACC,UAAMsC,SAAS,GAAG,KAAKrD,KAAL,CAAWC,MAAX,CAAkBqD,GAAlB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzD,UAAIL,SAAS,IAAI,KAAjB,EAAwB;AAC1B;AAAA,4BAAC,KAAD;AAAO,UAAA,GAAG,EAAEK,KAAZ;AAAmB,UAAA,GAAG,EAAED,KAAK,CAACxC,GAA9B;AAAmC,UAAA,QAAQ,EAAE,KAAKV,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,OAFG,MAEG,IAAI8C,SAAS,IAAI,KAAjB,EAAwB;AAC7B;AAAA,4BAAC,KAAD;AAAO,UAAA,GAAG,EAAEK,KAAZ;AAAmB,UAAA,GAAG,EAAED,KAAK,CAACvC,GAA9B;AAAmC,UAAA,QAAQ,EAAE,KAAKX,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AACF,KANqB,CAAlB;AAOA,wBACA;AAAK,MAAA,EAAE,EAAC,iBAAR;AAA0B,MAAA,KAAK,EAAE;AAACoD,QAAAA,eAAe,EAACL;AAAjB,OAAjC;AAA4D,MAAA,OAAO,EAAE,KAAKjD,YAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,EAAE,EAAC,YAAN;AAAmB,MAAA,OAAO,EAAE,KAAKA,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAApE,CADF,eAEE;AAAK,MAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,MAAA,EAAE,EAAC,eAAN;AAAsB,MAAA,OAAO,EAAEP,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAG,MAAA,EAAE,EAAC,WAAN;AAAkB,MAAA,OAAO,EAAE,KAAKW,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAG,MAAA,EAAE,EAAC,YAAN;AAAmB,MAAA,OAAO,EAAEZ,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CwD,SAA9C,CAHA,CADF,qBAMA;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAFF,CADF,EAKGE,SALH,CANA,MAFF,MADA;AAmBH;;AA9H0C;;AAgI3C,MAAMK,eAAe,GAAI1D,KAAD,IAAW;AACjC,SAAO;AACLmD,IAAAA,SAAS,EAAEnD,KAAK,CAACmD,SADZ;AAELQ,IAAAA,cAAc,EAAE3D,KAAK,CAAC2D;AAFjB,GAAP;AAID,CALD;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLlE,IAAAA,eAAe,EAAE,MAAMkE,QAAQ,CAAElE,eAAe,EAAjB,CAD1B;AAELC,IAAAA,aAAa,EAAE,MAAMiE,QAAQ,CAAEjE,aAAa,EAAf;AAFxB,GAAP;AAID,CALD;;AAQA,eAAeF,OAAO,CAACgE,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C/D,cAA7C,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport './styles.css';\nimport { Color } from './components/Color'\nimport { disableBodyScroll } from 'body-scroll-lock';\nimport $ from 'jquery';\nimport { connect } from 'react-redux';\nimport { toggleColorType, toggleHistory } from './redux';\n\nclass ColorGenerator extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [],\n      generateGrayscale: false,\n    };\n    this.anotherColor = this.anotherColor.bind(this);\n    this.colorRollback = this.colorRollback.bind(this);\n    this.generateColor = this.generateColor.bind(this);\n    this.toggleGrayscale = this.toggleGrayscale.bind(this);\n  }\n\n  anotherColor(clickedObject) {\n    if (clickedObject.target.id === \"color-generator\"\n    || clickedObject.target.id === \"howto-text\") {\n      $(\"#howto-text\").remove();\n      $(\"#history-text\").remove();\n      var colorHex = this.generateColor();\n      this.setState({\n        colors: this.state.colors.concat(\n              {\n                hex:colorHex,\n                rgb: \"RGB Value\"\n              }) // end concat()\n            }); //end setState\n        } // end if\n    } // end anotherColor\n\n    generateColor() {\n      var generatedColor = \"\";\n      if (this.state.generateGrayscale) {\n        generatedColor = Math.floor(Math.random()*16).toString(16).toUpperCase();\n        generatedColor = generatedColor + Math.floor(Math.random()*16).toString(16).toUpperCase();\n        generatedColor = generatedColor.repeat(3);\n        return \"#\" + generatedColor;\n      } else {\n      generatedColor = Math.floor(Math.random()*16777215).toString(16).toUpperCase();\n      while (generatedColor.length < 6) {\n        generatedColor = Math.floor(Math.random()*16777215).toString(16).toUpperCase();\n      }\n      /* alert(this.hexToRgb(\"#\" + generatedColor).r + \"\\n\" +\n            this.hexToRgb(\"#\" + generatedColor).g + \"\\n\" +\n            this.hexToRgb(\"#\" + generatedColor).b); */\n      return \"#\" + generatedColor;\n    }\n    }\n\n/* Tim Down: https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\n\n    hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\ncomponentDidMount() {\n  disableBodyScroll(document.body);\n  /* Register the Space (32) key as a click */\n      $(window).keyup(function(event) {\n          if (event.keyCode === 32) {\n              $(\"#color-generator\").click();\n          } // end if\n      }); // end $(tabs).keyup\n}\n\n  componentDidUpdate() {\n    var colorPanel = document.getElementById(\"color-list\");\n    colorPanel.scrollTo(0,colorPanel.scrollHeight);\n  }\n\n  colorRollback(clickedObject) {\n    var bgRollbackColor = $(clickedObject.target).css(\"backgroundColor\");\n    $('#color-generator').css(\"background-color\", bgRollbackColor);\n  }\n\n  toggleGrayscale() {\n    if (this.state.generateGrayscale) {\n      this.setState({ generateGrayscale: false });\n      $('#grayscale').css(\"color\",\"#FFFFFF\");\n    } else {\n      this.setState({ generateGrayscale: true });\n      $('#grayscale').css(\"color\",\"#000000\");\n    }\n  }\n\n  render(props) {\n    const { toggleHistory, toggleColorType, colorType } = this.props;\n    if(this.state.colors.length > 0) {\n      var bgColor = this.state.colors[this.state.colors.length - 1].hex;\n  }\n    const colorList = this.state.colors.map( (color, index) => {\n      if (colorType == \"HEX\") {\n    <Color key={index} hex={color.hex} function={this.colorRollback}/>\n  } else if (colorType == \"RGB\") {\n    <Color key={index} hex={color.rgb} function={this.colorRollback}/>\n  }\n})\n    return (\n    <div id=\"color-generator\" style={{backgroundColor:bgColor}} onClick={this.anotherColor}>\n      <p id=\"howto-text\" onClick={this.anotherColor}>Click, Tap, or Press <code>space</code></p>\n      <div id=\"history-container\">\n        <div id=\"buttons\">\n        <p id=\"history-arrow\" onClick={toggleHistory}>&or;</p>\n        <p id=\"grayscale\" onClick={this.toggleGrayscale}>&#9728;</p>\n        <p id=\"color-type\" onClick={toggleColorType}>{colorType}</p>\n        </div>  { /* end buttons */ }\n      <div id=\"color-list\">\n        <div id=\"history-text\">\n          <p>Your color history will appear here.</p>\n          <p>Click on a color to return to it.</p>\n        </div>\n        {colorList}\n        </div> { /* end color-list */ }\n        </div> { /* end color-container && end color-generator on line below */ }\n    </div>\n  )\n}\n}\nconst mapStateToProps = (state) => {\n  return {\n    colorType: state.colorType,\n    historyVisible: state.historyVisible\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toggleColorType: () => dispatch( toggleColorType() ),\n    toggleHistory: () => dispatch( toggleHistory() )\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorGenerator);\n"]},"metadata":{},"sourceType":"module"}