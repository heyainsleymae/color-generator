{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Code/React/colors/src/ColorGenerator.js\";\nimport React, { PureComponent } from 'react';\nimport './App.css';\nimport { Color } from './components/Color';\nimport { disableBodyScroll } from 'body-scroll-lock';\n\nclass ColorGenerator extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: []\n    };\n    this.anotherColor = this.anotherColor.bind(this);\n  }\n\n  anotherColor() {\n    var colorHex = this.generateHex();\n    this.setState({\n      colors: this.state.colors.concat({\n        hex: colorHex\n      }) // end concat()\n\n    }); //end setState\n\n    $(\"colors-panel\").animate({\n      scrollTop: $(document).height() + $(window).height()\n    });\n  }\n\n  generateHex() {\n    var generatedColor = Math.floor(Math.random() * 16777215).toString(16).toUpperCase();\n\n    while (generatedColor.length < 6) {\n      generatedColor = Math.floor(Math.random() * 16777215).toString(16).toUpperCase();\n    }\n\n    return \"#\" + generatedColor;\n  }\n\n  componentDidMount() {\n    disableBodyScroll(document.body);\n  }\n\n  render() {\n    if (this.state.colors.length > 0) {\n      console.log(this.state.colors[this.state.colors.length - 1].hex);\n      var clr = this.state.colors[this.state.colors.length - 1].hex;\n      console.log(\"clr val: \" + this.state.colors[this.state.colors.length - 1].hex);\n    }\n\n    const colorList = this.state.colors.map((color, index) => /*#__PURE__*/React.createElement(Color, {\n      key: index,\n      hex: color.hex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"color-generator-app\",\n      style: {\n        backgroundColor: clr\n      },\n      onClick: this.anotherColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"colors-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, colorList));\n  }\n\n}\n\nexport { ColorGenerator };","map":{"version":3,"sources":["/Users/john/Desktop/Code/React/colors/src/ColorGenerator.js"],"names":["React","PureComponent","Color","disableBodyScroll","ColorGenerator","constructor","props","state","colors","anotherColor","bind","colorHex","generateHex","setState","concat","hex","$","animate","scrollTop","document","height","window","generatedColor","Math","floor","random","toString","toUpperCase","length","componentDidMount","body","render","console","log","clr","colorList","map","color","index","backgroundColor"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport './App.css';\nimport { Color } from './components/Color'\nimport { disableBodyScroll } from 'body-scroll-lock';\n\nclass ColorGenerator extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: []\n    };\n    this.anotherColor = this.anotherColor.bind(this);\n  }\n\n  anotherColor() {\n    var colorHex = this.generateHex();\n    this.setState({\n      colors: this.state.colors.concat(\n            {\n              hex:colorHex\n            }) // end concat()\n          }); //end setState\n      $(\"colors-panel\").animate({scrollTop: $(document).height() + $(window).height()});\n    }\n\n    generateHex() {\n      var generatedColor = Math.floor(Math.random()*16777215).toString(16).toUpperCase();\n      while (generatedColor.length < 6) {\n        generatedColor = Math.floor(Math.random()*16777215).toString(16).toUpperCase();\n      }\n      return \"#\" + generatedColor;\n    }\n\ncomponentDidMount() {\n  disableBodyScroll(document.body);\n  }\n\n  render() {\n    if(this.state.colors.length > 0) {\n      console.log(this.state.colors[this.state.colors.length - 1].hex);\n      var clr = this.state.colors[this.state.colors.length - 1].hex;\n      console.log(\"clr val: \" + this.state.colors[this.state.colors.length - 1].hex);\n  }\n    const colorList = this.state.colors.map( (color, index) =>\n    <Color key={index} hex={color.hex}/>)\n    return(\n    <div id=\"color-generator-app\" style={{backgroundColor:clr}} onClick={this.anotherColor}>\n      <div className=\"colors-panel\">\n        {colorList}\n      </div>\n    </div>\n\n  )\n}\n}\n\nexport { ColorGenerator };\n"]},"metadata":{},"sourceType":"module"}